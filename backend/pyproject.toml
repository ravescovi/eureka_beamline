[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "eureka-beamline-backend"
version = "0.1.0"
description = "Backend service for Eureka Beamline with FastAPI agents"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.2",
    "openai>=1.3.0",
    "caproto>=1.2.0",
    "ophyd.sim>=1.6.1",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "types-requests>=2.31.0.20231025",
    "types-PyYAML>=6.0.12.12",
]

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "F", "B", "I", "N", "UP", "ANN", "S", "A", "C4", "DTZ", "T10", "EM", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "RUF"]
ignore = ["ANN101", "ANN102", "ANN204"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ANN401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_config = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=eureka_beamline_backend --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["eureka_beamline_backend"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
] 